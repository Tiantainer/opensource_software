number,title,state,created_at,closed_at,author,labels,changed_files,additions,deletions,merged,merged_by,review_comments,url,branch,base_branch,body,draft,age_days,comment_count,review_state
2240,fix: drain iterators in Check,open,2025-01-24 23:40:59,,miparnisari,[],2,59,12,False,,0,https://github.com/openfga/openfga/pull/2240,properly-drain-iterators-fix,main,"## Description

I wrote a unit test that, without the code change, randomly fails with ""iterator.Stop not called"". This can mean a leak in goroutines.


## References

https://github.com/openfga/openfga/actions/runs/12935953707/job/36080447940

```
--- FAIL: TestCheckMySQL (25.68s)
    tests.go:63: creating connection to address localhost:45819
    testutils.go:234: 2025-01-23 18:50:21.15580025 +0000 UTC m=+68.914354291 not serving yet at address localhost:45819 rpc error: code = Unavailable desc = connection error: desc = ""transport: Error while dialing: dial tcp [::1]:45819: connect: connection refused""
    testutils.go:234: 2025-01-23 18:50:21.499385381 +0000 UTC m=+69.257939412 not serving yet at address localhost:45819 rpc error: code = Unavailable desc = connection error: desc = ""transport: Error while dialing: dial tcp [::1]:45819: connect: connection refused""
    tests.go:57: waiting for server to stop
    tests.go:60: server stopped with error:  <nil>
    mysql.go:106: stopping container mysql-01JJA804SJPYF6NMQE5FVWNF2H
    mysql.go:113: stopped container mysql-01JJA804SJPYF6NMQE5FVWNF2H
    check_test.go:329: found unexpected goroutines:
        [Goroutine 108867 in state select, with github.com/go-sql-driver/mysql.(*mysqlConn).startWatcher.func1 on top of the stack:
        github.com/go-sql-driver/mysql.(*mysqlConn).startWatcher.func1()
        	/home/runner/go/pkg/mod/github.com/go-sql-driver/mysql@v1.8.1/connection.go:628 +0x105
        created by github.com/go-sql-driver/mysql.(*mysqlConn).startWatcher in goroutine 108744
        	/home/runner/go/pkg/mod/github.com/go-sql-driver/mysql@v1.8.1/connection.go:625 +0x1dd
```",False,0,0,pending
2239,refactor: move some functionality into iterator stream,open,2025-01-24 21:45:31,,adriantam,['Skip-Changelog'],4,995,229,False,,0,https://github.com/openfga/openfga/pull/2239,refactor/check_fastpath_iterator_stream,main,"
## Description
Clean up the code by moving some functionality from check fastpath into iterator stream.  At the same time, increase test coverage for check fastpath.

 
## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->

## Review Checklist
- [x] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [x] The correct base branch is being used, if not `main`
- [x] I have added tests to validate that the change in functionality is working as expected

",False,0,1,pending
2238,perf: remove fmt.sprintf and just add strings,open,2025-01-24 21:34:49,,justincoh,['Skip-Changelog'],1,5,1,False,,0,https://github.com/openfga/openfga/pull/2238,perf/remove-fmt-sprintf-from-tuple-stringifier,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->

## Description
<!-- Provide a detailed description of the changes -->
Came across a `fmt.sprintf` in the `tuple` package which we can make faster while maintaining readability by just concatenating strings.

I did a quick benchmark comparison:
```
func BenchmarkTupleStringifiers(b *testing.B) {
	tupleKey := &openfgav1.TupleKey{
		User:     ""user:justin"",
		Relation: ""viewer"",
		Object:   ""doc:1"",
	}

	b.Run(""new_version"", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_ = TupleKeyToString(tupleKey)
		}
	})
}
```

Old:
<img width=""969"" alt=""image"" src=""https://github.com/user-attachments/assets/bd9f3ffb-af01-4b83-b03f-9362233909b1"" />

New
<img width=""969"" alt=""image"" src=""https://github.com/user-attachments/assets/7761b35c-5e0f-4c14-9c3c-9f620752b221"" />

Percentage-wise it's quite a bit faster, but we're talking nanoseconds here so ðŸ¤· 

We can actually make it significantly faster still (and remove all memory usage) if we specify an explicit type for this function to accept, rather than an interface, but that requires a refactor in other places and doesn't seem worth it for such small gains.

With explicit type:
<img width=""921"" alt=""image"" src=""https://github.com/user-attachments/assets/b91f1586-d011-4457-864c-54b1cb2349ca"" />


## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->

## Review Checklist
- [ ] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected

",False,0,1,pending
2237,chore: introduce new IObjectMapper interface and use it within Check API,open,2025-01-23 23:20:29,,miparnisari,['Skip-Changelog'],7,414,215,False,,0,https://github.com/openfga/openfga/pull/2237,introduce-new-interface,main,"## Description

I introduce a new interface `IObjectMapper` (could also be called `IObjectIterator`..) that is an iterator that returns the `object` field of a tuple.

This change should

- not change API behavior
- reduce memory consumption
- increase code clarity by making more explicit what the iterator returns

I also introduce `storage.NewStaticObjectMapper` that implements `IObjectMapper`.

",True,1,1,draft
2230,Mysql: Extend `object_id` VARCHAR to 256,open,2025-01-21 16:24:09,,eleijonmarck,[],1,5,0,False,,0,https://github.com/openfga/openfga/pull/2230,eleijonmarck/mysql/extend_object_id_to_256,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->

## Description
<!-- Provide a detailed description of the changes -->

Described in issue : https://github.com/openfga/openfga/issues/2233

## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->

## Review Checklist
- [ ] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected

",True,3,2,draft
2214,refactor resolve_check_request fields to be private,open,2025-01-15 02:02:56,,justincoh,"['refactor', 'Skip-Changelog']",15,632,418,False,,0,https://github.com/openfga/openfga/pull/2214,refactor/resolve-check-request-private-fields,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->

## Description
<!-- Provide a detailed description of the changes -->

## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->

## Review Checklist
- [ ] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected

",True,10,0,draft
2202,refactor: check command contextual tuples type,open,2025-01-09 19:30:57,,justincoh,"['refactor', 'Skip-Changelog']",5,13,17,False,,1,https://github.com/openfga/openfga/pull/2202,refactor/check-command-param-type,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->

## Description
<!-- Provide a detailed description of the changes -->
This PR implements no new functionality.

This is a small refactor to enable a fix for a data race in #2193. The race stems from [this block in list_objects](https://github.com/openfga/openfga/blob/main/pkg/server/commands/list_objects.go#L339-L349).

In #2193, we're making a change to ensure that we don't unnecessarily recalculate cache keys for pieces of data that don't change during the life of a check (modelID, storeID, context, contextualTuples). However, in [the linked code block](https://github.com/openfga/openfga/blob/main/pkg/server/commands/list_objects.go#L339-L349) we are concurrently firing off multiple `CheckCommand` which share `ContextualTuples`.

One of the first things the CheckCommand does is calculate cache keys. When creating the Invariant piece of the CacheKey for a request, [this sort](https://github.com/openfga/openfga/blob/main/internal/keys/hasher.go#L82) triggers [a swap operation](https://github.com/openfga/openfga/blob/main/pkg/tuple/tuple.go#L53-L58) that mutates the underlying ContextualTuples. In the context of a `check` request, this is fine. But having multiple routines attempt to Check a single request simultaneously leads to [data races like this one](https://github.com/openfga/openfga/actions/runs/12694360071/job/35383968107?pr=2193#step:5:412).

There is a simple fix here; use [golang's built-in copy](https://pkg.go.dev/builtin#copy) method to deep copy the underlying ~tuples~ slice. Copy, however, only works on slices, and there's no concise way to deep copy a struct that I can find.

This PR changes `CheckCommandParams.ContextualTuples` from the struct type `*openfgav1.ContextualTupleKeys`  to the underlying slice type `[]*openfgav1.TupleKey`. We were always immediately calling `GetTupleKeys()` on the existing ContextualTuples anyway, so this refactor was very simple.

I suspect the coming `copy()` operation will have to be done in BatchCheck as well as list objects, since it also concurrently fires many check commands in the context of an individual request.


## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->

## Review Checklist
- [ ] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected

",False,15,2,pending
2200,perf: improve performance of a union of recursive ttu with nested algebraic operations,open,2025-01-08 21:05:40,,miparnisari,[],8,1138,19,False,,30,https://github.com/openfga/openfga/pull/2200,recursive-ttu-with-algebraic-ops,main,"## Description
This PR is meant to increase performance in Check API for some authorization models. E.g when querying `rel1`:

```
model
	schema 1.1
type user
type document
	relations
		define rel1: rel2 or rel1 from parent
		define parent: [document]
		define rel2: [user] and rel3
		define rel3: [user]
```

For this purpose, I introduced:
- a new method within `optimizations.go` to detect when we can apply this optimization
- an `objectProvider` interface with two implementations (`simple` is a restructuring of an existing optimization, `complex` provides the new optimization)

NOTE:  my code (v2) is a generalization of v1, so v2 can in the future replace v1 in all scenarios (unless i misunderstood the requirements doc)


## References
Depends on https://github.com/openfga/openfga/pull/2231

",False,16,1,pending
2196,chore: rename cache controller to cache invalidator,open,2025-01-08 16:51:21,,miparnisari,['Skip-Changelog'],15,165,164,False,,1,https://github.com/openfga/openfga/pull/2196,rename-cache-controller,main,"## Description
Rename only, no functional change should be expected. 
- The environment variables for the feature remain the same.
- So do the metric names.

## References
https://rygo6.github.io/2019/04/19/Controller-is-Probably-a-Bad-Name.html

## Testing

```
make build
./dist/openfga run --cache-controller-ttl=25s --cache-controller-enabled=true
```

See the logs:

```
 INFO    starting openfga service...  ,""CacheController"":{""Enabled"":true,""TTL"":25000000000},
```

",False,16,1,pending
2182,feat: implement dynamic TLS certificate reloading for HTTP and gRPC servers,open,2024-12-22 13:28:16,,RokibulHasan7,[],3,168,20,False,,3,https://github.com/openfga/openfga/pull/2182,tls,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->

## Description
<!-- Provide a detailed description of the changes -->

## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) --> #668

## Review Checklist
- [x] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected

",False,34,3,pending
2122,add support for disabling telemetry exporter,open,2024-11-26 13:45:24,,kullanici0606,[],4,29,24,False,,5,https://github.com/openfga/openfga/pull/2122,support-for-disabling-otel-exporter,main,"## Description
This PR adds support for disabling OpenTelemetry GRPC exporter when tracing is enabled.
This is useful for logging trace IDs but not wanting them to export to OTEL collector.

PR to documentation: https://github.com/openfga/openfga.dev/pull/897

## References
[<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->](https://github.com/openfga/openfga/issues/2120)

## Review Checklist
- [ ] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected

If you haven't done so yet, we would appreciate it if you could star the [OpenFGA repository](https://github.com/openfga/openfga). :) 
",False,60,6,pending
1990,[1935] - health checks added for grpc logs,open,2024-10-04 10:03:16,,nikzayn,[],4717,6594578,4,False,,8,https://github.com/openfga/openfga/pull/1990,enhancement/1935,main,"## Description
This PR introduces a new feature to suppress health check logs, addressing the issue of noisy logs in production environments, especially in Kubernetes deployments with frequent health probes.

## Changes

- Added a new --silent-healthchecks flag
- Implemented silent health checks in the health checker for grpc logs
- Updated configuration and logging to support the new feature
- Added tests for the new functionality

Usage
To enable silent health checks, use:

CLI flag:

--silent-healthchecks
Or, set in configuration:

silent-healthchecks: true
Or, via environment variable:

OPENFGA_SILENT_HEALTHCHECKS=true
This feature allows users to maintain detailed logging for their application while preventing health check requests.

## References
fixes https://github.com/openfga/openfga/issues/1935

## Review Checklist
[x] [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
[]I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev (https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
[x] The correct base branch is being used, if not main
[x] I have added tests to validate that the change in functionality is working as expected",False,113,2,pending
1916,chore: eases the DX on logger by conflating types in a single package.,open,2024-09-07 05:40:27,,jcchavezs,[],18,370,190,False,,0,https://github.com/openfga/openfga/pull/1916,hides_logger_implementation,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->

## Description
<!-- Provide a detailed description of the changes -->
Currently when consuming the logger package one need to consume 2-3 packages. Wrapping the zap logger eases the setup but the logger interface seems incomplete by the need to importing zap packages. This PR adds alias types to provide a consistent experience when using logging.
## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->

## Review Checklist
- [ ] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [ ] The correct base branch is being used, if not `main`
- [ ] I have added tests to validate that the change in functionality is working as expected
",False,140,0,pending
1662,chore: refactor `server.Run`,open,2024-06-04 22:07:21,,00chorch,['Skip-Changelog'],2,246,173,False,,0,https://github.com/openfga/openfga/pull/1662,refactor-server-run-complexity,main,"## Summary
Refactored code from Run func to helper func to reduce code complexity

## Description
Refactored code to delegate in sub-functions the dial to GRPC, and the logic for starting HTTP Server + Playground.

## References
- Issue #1575
- Old PR #1605 (accidentally closed)

## Review Checklist
- [X] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [ ] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [X] The correct base branch is being used, if not `main`
- [X] I have added tests to validate that the change in functionality is working as expected",False,234,1,pending
1599,Upgrade go-grpc-middleware to v2.1.0,open,2024-05-05 21:35:41,,ilaleksin,[],11,168,81,False,,0,https://github.com/openfga/openfga/pull/1599,refactor/grpc-logging-v2,main,"<!-- Thanks for opening a PR! Here are some quick tips:
If this is your first time contributing, [read our Contributing Guidelines](https://github.com/openfga/.github/blob/main/CONTRIBUTING.md) to learn how to create an acceptable PR for this repo.
By submitting a PR to this repository, you agree to the terms within the [OpenFGA Code of Conduct](https://github.com/openfga/.github/blob/main/CODE_OF_CONDUCT.md)

If your PR is under active development, please submit it as a ""draft"". Once it's ready, open it up for review.
-->

<!-- Provide a brief summary of the changes -->
This PR addresses https://github.com/openfga/openfga/issues/893.
It removes dependencies to go-grpc-middleware v1.4.0 existed in logging and recovery middlewares.

## Description
<!-- Provide a detailed description of the changes -->
1. Cloned **grpc_ctxtags** middleware to the project repository because it was deleted from [go-grpc-middleware v2.0.0](https://github.com/grpc-ecosystem/go-grpc-middleware/releases/tag/v2.0.0). It was required either get rid of grpc tags middleware or copy it to the openfga project to delete dependency on go-grpc-middleware without v1.4.0.

Firstly, I tried to migrate the logging middleware to [logging.InjectField API ](https://github.com/grpc-ecosystem/go-grpc-middleware/blob/7da22cf3f3d3ae190467d9c7a3ea749b3d0e63b5/interceptors/logging/doc.go#L8) introduced in v2.0.0.
I couldn't complete this migration because I didn't find a way to [pass Authorization Model ID from a handler](https://github.com/openfga/openfga/blob/main/pkg/server/server.go#L1150) to the logging middleware. Before, it was achieved by setting a key-value to the tag map and then reading all key-value pairs on the logging layer.

New API doesn't use the embedded map (as grpc_ctxtags does). Instead, it returns a context with the injected field. I didn't find a way to deliver this new context from the handler layer to PostCall function of the logging middleware.

Therefore, I decided to clone part of grpc_ctxtags middleware to the project and keep logging data propagation the same.

2. Upgraded grpc recovery middleware to v2. There were no breaking changes.

3. Metrics and traces were not affected by the upgrade.

<img width=""1400"" alt=""Screenshot 2024-05-05 at 23 03 07"" src=""https://github.com/openfga/openfga/assets/48867156/f28ce10a-60ce-4f28-ace4-e7f087fbe8e0"">

<img width=""918"" alt=""Screenshot 2024-05-05 at 23 02 29"" src=""https://github.com/openfga/openfga/assets/48867156/39fa8d4f-a04f-4d58-afa8-8191871b7003"">

## References
<!-- Provide a list of any applicable references here (GitHub Issue, [OpenFGA RFC](https://github.com/openfga/rfcs), other PRs, etc..) -->



## Review Checklist
- [x] I have clicked on [""allow edits by maintainers""](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).
- [x] I have added documentation for new/changed functionality in this PR or in a PR to [openfga.dev](https://github.com/openfga/openfga.dev) [Provide a link to any relevant PRs in the references section above]
- [x] The correct base branch is being used, if not `main`
- [x] I have added tests to validate that the change in functionality is working as expected
",False,264,3,pending
